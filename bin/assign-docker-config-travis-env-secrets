#!/usr/bin/env ruby

require 'optparse'
require 'pathname'

def main
  options = {
    repository: '',
    client_config_url: '',
    docker_host: '',
    iv: '',
    key: '',
    salt: ''
  }

  OptionParser.new do |opts|
    opts.on('--repository=REPOSITORY', String) do |v|
      options[:repository] = v.strip
    end

    opts.on('--docker-host=DOCKER_HOST', String) do |v|
      options[:docker_host] = v.strip
    end

    opts.on('--client-config-url=CLIENT_CONFIG_URL', String) do |v|
      options[:client_config_url] = v.strip
    end

    opts.on('--iv=IV', String) do |v|
      options[:iv] = v.strip
    end

    opts.on('--key=KEY', String) do |v|
      options[:key] = v.strip
    end

    opts.on('--salt=SALT', String) do |v|
      options[:salt] = v.strip
    end
  end.parse!

  options.clone.each do |key, value|
    fail "missing value for --#{key.gsub('_', '-')}" if value.strip.empty?
  end

  %i[iv key salt].each do |part|
    unless system(%W[
      travis env set
        DOCKER_CLIENT_CONFIG_ENC_#{part.to_s.upcase}
        #{options[part]}
        --private
        --repo #{options[:repository]}
    ].join(' '))
      fail "failed to set env var for #{part}"
    end
  end

  unless system(%W[
    travis env set
      DOCKER_CLIENT_CONFIG_URL #{options[:client_config_url]}
      --private
      --repo #{options[:repository]}
  ].join(' '))
    fail 'failed to set DOCKER_CLIENT_CONFIG_URL'
  end

  unless system(%W[
    travis env set
      DOCKER_HOST #{options[:docker_host]}
      --private
      --repo #{options[:repository]}
  ].join(' '))
    fail 'failed to set DOCKER_HOST'
  end

  0
end

exit(main) if $PROGRAM_NAME == __FILE__
